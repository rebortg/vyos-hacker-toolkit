#!/bin/bash

# Get configuration

wd=$( pwd )
etc="$( cd "$(dirname "$0")"/../etc ; pwd ; cd - > /dev/null 2>/dev/null )"
data="$( cd "$(dirname "$0")"/../data ; pwd ; cd - > /dev/null 2>/dev/null )"
cd $etc; for name in `ls`; do declare config_$name=$( cat $name ); done; cd - > /dev/null 2>/dev/null

ssh_build_user=""
ssh_build_port=""
scp_build_port=""

build_host=$config_build_host
build_port=$config_build_port
build_repo=$config_build_repo
build_folder=$config_build_folder

if [ "$config_build_user" != "" ]; then
	ssh_build_user=" $config_build_user@"
fi

if [ "$config_build_port" != "" ]; then
	ssh_build_port="-p $config_build_port"
	scp_build_port="-P $config_build_port"
fi

connect_build="ssh $ssh_build_port $ssh_build_user$build_host"

# home_build=$( $connect_build 'echo $HOME' )

docker_iso="docker run --rm --privileged -v $home/$build_repo:$home/$build_repo -w $home/$build_repo vyos/vyos-build:current"
docker_dpkg="docker run --rm --privileged -v $home/$build_repo:$home/$build_repo -w $home/$build_repo/packages/vyos-1x vyos/vyos-build:current"

# Check if remote router is up

echo "checking if the build machine is up"
up=$( $connect_build 'echo up' 2> /dev/null )
if [ "$up" != "up" ]; then
	echo "could not $connect_build"
	exit
fi

# copying packages

echo $( date ) testing iso

$connect_build $docker_iso sudo make test

echo $( date ) complete
